#Quicksort
def quick_sort(array, low, high):
  if low < high:
    # Dividir y acomodar pivote
    pi = partition(array, low, high)
  
    quick_sort(array, low, pi - 1)
    quick_sort(array, pi + 1, high)
 
def partition(array, low, high):  
  # Pivote el de la derecha
  pivot = array[high]
  
  # Apuntador del último elemento más pequeño
  i = low - 1
 
  for j in range(low, high):
    if array[j] <= pivot:
      # Avanzar apuntador
      i = i + 1
      # Intercambiar elementos
      (array[i], array[j]) = (array[j], array[i])
  
  # Al final intercambiar el pivote
  (array[i + 1], array[high]) = (array[high], array[i + 1])
  
  # Regresa la posición final del pivote
  return i + 1
 
arr = [4,6,2,5,8,9,5,10]
print(arr)
quick_sort(arr, 0, len(arr)-1)
print(arr)

#Mergesort
def mergeSort(arr):
    if len(arr) == 1:
        return arr
    middle = len(arr) // 2
    left_array = arr [:middle]
    right_array = arr [middle:]
    sorted_left_array = mergeSort (left_array)
    sorted_right_array = mergeSort( right_array)
    return Merge(sorted_left_array, sorted_right_array)

def Merge(left_arr, right_arr):
    arr_resultado = []
    while len(left_arr) > 0 and len(right_arr) > 0:
        if left_arr[0] > right_arr[0]: 
            arr_resultado.append(right_arr[0]) 
            right_arr.pop(0)
        else:
            arr_resultado.append(left_arr[0]) 
            left_arr.pop(0)
    while len(left_arr) > 0: 
        arr_resultado.append(left_arr[0]) 
        left_arr.pop(0)
    while len(right_arr) > 0: 
        arr_resultado.append(right_arr[0]) 
        right_arr.pop(8)
    return arr_resultado

#Heapsort
def heapify(arr, n, i):
    largest = i  # Initialize largest as root
    l = 2 * i + 1  # left = 2*i + 1
    r = 2 * i + 2  # right = 2*i + 2
 
    if l < n and arr[i] < arr[l]:
        largest = l
 
    if r < n and arr[largest] < arr[r]:
        largest = r

    if largest != i:
        (arr[i], arr[largest]) = (arr[largest], arr[i])  # swap
 
        heapify(arr, n, largest)
 
def heapSort(arr):
    n = len(arr)

    for i in range(n // 2, -1, -1):
        heapify(arr, n, i)

    for i in range(n - 1, 0, -1):
        (arr[i], arr[0]) = (arr[0], arr[i])  # swap
        heapify(arr, i, 0)

arr = [12, 11, 13, 5, 6, 7, ]
heapSort(arr)
n = len(arr)
print('Sorted array is')
for i in range(n):
    print(arr[i])

#Shellshort
def shellSort(arr):

    n = len(arr)
    gap = n/2

    while gap > 0:
 
        for i in range(gap,n):
 
            temp = arr[i]
 
            j = i
            while j >= gap and arr[j-gap] >temp:
                arr[j] = arr[j-gap]
                j -= gap

            arr[j] = temp
        gap /= 2

arr = [ 12, 34, 54, 2, 3]
 
n = len(arr)
print ("Array before sorting:")
for i in range(n):
    print(arr[i]),
 
shellSort(arr)
 
print ("\nArray after sorting:")
for i in range(n):
    print(arr[i]),

